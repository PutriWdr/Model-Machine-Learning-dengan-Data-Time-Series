# -*- coding: utf-8 -*-
"""Putri Wulandari.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1FjEkRlJf21qtl633kQDVrJxzwHhlmQax
"""

# install kagglee
!pip install -q kaggle

"""Nama: Putri Wulandari

Kelas: Machine Learning dan Front End

Proyek Kedua : Membuat Model Machine Learning dengan Data Time Series
"""

# uploaddd kaggle.json
from google.colab import files
files.upload()

# make directory dan change permissionnn
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!ls ~/.kaggle

# download dataset,
!kaggle datasets download -d meetnagadia/apple-stock-price-from-19802021

from zipfile import ZipFile
file_name = "/content/apple-stock-price-from-19802021.zip"

with ZipFile(file_name,'r') as zip:
  zip.extractall()
  print("done")

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf

data_trainn = pd.read_csv('/content/AAPL.csv')
data_trainn.head()

# data info
data_trainn.info()

data_trainn.isnull().sum()

data_trainn.isnull()

date = data_trainn['Date'].values
category  = data_trainn['Open'].values
 
 
plt.figure(figsize=(15,5))
plt.plot(date, category)
plt.title('Temperature average',
          fontsize=20);

date = data_trainn['Date'].values
category  = data_trainn['Open'].values

import matplotlib.pyplot as plt

plt.figure(figsize=(20,8))
plt.plot(date, category)
plt.title('Stock Apple')
plt.xlabel('Date')
plt.ylabel('category')
plt.show()

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  
    series = tf.expand_dims(series, axis=-1)
    dt = tf.data.Dataset.from_tensor_slices(series)
    dt = dt.window(window_size + 1, shift=1, drop_remainder=True)
    dt = dt.flat_map(lambda w: w.batch(window_size + 1))
    dt = dt.shuffle(shuffle_buffer)
    dt = dt.map(lambda w: (w[:-1], w[-1:]))
    return dt.batch(batch_size).prefetch(1)

from sklearn.model_selection import train_test_split

x_train, x_test, y_train, y_test = train_test_split(category, date, test_size = 0.2, random_state = 0 , shuffle=False)
print(len(x_train), len(x_test))

#MODEL

from keras.layers import Dense, LSTM

train_set = windowed_dataset(x_train, window_size=60, batch_size=100, shuffle_buffer=5000)
test_set = windowed_dataset(x_test, window_size=60, batch_size=100, shuffle_buffer=5000)

model = tf.keras.models.Sequential([
  tf.keras.layers.Conv1D(filters=32, kernel_size=5,
                      strides=1, padding="causal",
                      activation="relu",
                      input_shape=[None, 1]),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.LSTM(64, return_sequences=True),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
  tf.keras.layers.Lambda(lambda x: x * 400)
])

lr_schedule = tf.keras.callbacks.LearningRateScheduler(
    lambda epoch: 1e-8 * 10**(epoch / 20))
optimizer = tf.keras.optimizers.SGD(lr=1e-8, momentum=0.9)
model.compile(loss=tf.keras.losses.Huber(),
              optimizer=optimizer,
              metrics=["mae"])

max = data_trainn['Open'].max()
print('Max value : ' )
print(max)

min = data_trainn['Open'].min()
print('Min Value : ')
print(min)

x = (182.630005 - 0.049665 ) * (10 / 100)
print(x)

# CALLBACK
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae')< x):
      self.model.stop_training = True
      print("\nMAE of the model < 10% of data scale")
callbacks = myCallback()

history = model.fit(train_set,epochs=80,validation_data=test_set)

# plot dari MAEE

import matplotlib.pyplot as plt
plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('MAE')
plt.ylabel('mae')
plt.xlabel('epoch')
plt.legend(['trainn', 'test'], loc='upper left')
plt.show()

# plot dari LOSS

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Model Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()